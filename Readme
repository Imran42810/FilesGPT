# FileChat — AI File Chat Application Prompt 🚀

🔗 **Project Playground:** [Try the live demo](https://filesgptaii.lovable.app/)

Welcome to **FilesGPT**, your all-in-one solution to upload, manage, and chat with your files using cutting-edge AI. Below is the complete project prompt you can use to scaffold and build the system. No code files are included—just the prompt that outlines the entire architecture and feature set.

---

## 📢 Project Prompt
**Project Name & Purpose**

- **FileGPT**: A web application where users can upload, manage, and chat with their files in one seamless interface.

**Hero Section**

- **Layout & Branding:**
  - Top-left: “FileChat” logo text (clean, bold sans-serif).
  - Top-right: Coral (#FF6F61) “Sign Up” button → navigates to Auth panel.
- **Main Heading:** “Transform the Way You Interact with Your Files”
  - Font: Montserrat/Poppins, weight 700, color #333333. Emphasize “Interact” in Coral (#FF6F61).
- **Subheading:** “Upload, manage, and chat with your files in a seamless, intuitive environment.”
  - Font: Roboto/Open Sans, weight 400, color #333333.
- **Illustration/Play Icon:**
  - Centered circular play-button overlay on soft gradient circle (light coral to light blue halos).
  - Hover: scale up & reduce overlay opacity.
- **Primary CTA:** “Get Started →” button
  - Background: Accent Blue (#2D9CDB), text white (Montserrat 500).
  - Hover: lighten by 10%, click → Auth page.
- **Colors & Background:**
  - Page bg: Light Gray (#F7F7F7).
  - Hero bg: subtle diagonal gradient from #F7F7F7 to very light coral hue.

**Authentication Flow** (Single-Page, Tabbed)

- **UI Structure:** Centered card with two tabs: “Sign Up” | “Sign In.”
- **Form Fields:** Email (real-time format validation), Password (strength meter on Sign Up).
- **Action Buttons:** Sign Up = Coral “Create Account”; Sign In = Coral “Continue.”
- **Toggle Links:**
  - Under Sign In: “Don’t have an account? Sign Up”
  - Under Sign Up: “Already have an account? Sign In”
- **Behavior:**
  - Successful submit → redirect to main dashboard.
  - Inline error messages for invalid/missing fields.

**Accessibility & Responsiveness**

- Keyboard-navigable elements with visible focus states.
- ARIA labels on inputs/buttons.
- Breakpoints: mobile (≤640px), tablet (641–1024px), desktop (≥1025px).

**Deliverables**

- React components (Tailwind) for Hero & Auth pages.
- Fully clickable, animated CTAs & play icon.
- Consistent typography, colors, spacing as specified.

---

## 🛠️ Core Architecture

- **Frontend:** React + TypeScript + Tailwind CSS + Vite  
- **Backend:** Supabase (Database, Storage, Auth, RLS, Edge Functions)  
- **AI Integration:** Gemini API for natural language chat  

### 🔐 Authentication & Authorization
All tables and storage buckets use **Row-Level Security (RLS)**. Sensitive operations require **your credentials**.

---

## 📋 Database Schema

| Table                  | Purpose                                        | Access Scope         |
|------------------------|------------------------------------------------|----------------------|
| `files`                | File metadata & extraction status              | User-scoped (RLS)    |
| `n8n_chat`             | Chat session management linking to files       | User-scoped (RLS)    |
| `n8n_chat_histories`   | All chat messages (user/assistant)             | User-scoped (RLS)    |
| `daily_message_limits` | Tracks daily message count (5/day)             | User-scoped (RLS)    |
| `profiles`             | Extended user info                             | User-scoped (RLS)    |
| `vectors_data`         | Precomputed embeddings for future RAG          | User-scoped (RLS)    |

### 🔧 Database Functions

- `check_and_increment_message_count()` — rate limiting logic  
- `get_daily_message_count()` — fetch current count  
- `handle_new_user()` — auto-create profile on signup

---

## ⚙️ Edge Functions

1. **upload-file** — handle file uploads (`your credentials`)  
2. **delete-file** — remove files (`your credentials`)  
3. **extract-text** — extract text content from uploads (`your credentials`)  
4. **chat-with-file** — route chat queries to Gemini API (`your credentials`)

---

## 🧩 React Components & Hooks

**Core Components:**
- `FileUploader` — drag & drop interface 📂
- `FileList` — manage and delete files 🗂️
- `ChatInterface` — interactive AI chat UI 💬
- `AuthFlow` — unified Sign Up / Sign In tabs 🔒

**Pages:**
- `Index` — main dashboard  
- `Auth` — login/signup  
- `Dashboard` — protected user area  
- `NotFound` — 404 page 🚫

**Custom Hooks:**
- `useFileOperations` — upload/delete/rename files
- `useFileChat` — send/receive chat messages
- `useMessageLimit` — enforce daily limit

---

## ✅ Key Features Implemented

- User authentication & Supabase Auth 🔐  
- File upload & management with a 50 MB cap 📦  
- Text extraction for supported file types 📄  
- AI chat with file context via Gemini 🤖  
- Daily message limit (5 messages/day) ⏳  
- Responsive UI with dark/light themes 🌗  
- Real-time file status updates 🔄  
- RLS security on all data 👮


## 🔄 Prepared for Future Enhancements

- Vector embeddings system for semantic search 🔮  
- Advanced file type support (PDF, DOCX) 📑  
- Chat session history & management 🗃️

---

> **Note:** This repository contains only the project prompt. All code, assets, and configuration files are excluded.
